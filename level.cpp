#include "level.h"
#include "globals.h"
#include <algorithm>

inline char LEVEL_1_DATA[] = {
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '*', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '*', '-', '-', '-', '#', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '=', '=', '=', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '*', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '=', '=', '=', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '#', '-', '#', '-', '#', '-', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '=', '=', '=', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '-', '#', '-', '#', '-', '#',
        '#', '#', '#', '#', '#', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '#', '#', '#', '#', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '#', '#', '#', '#', '#',
        '#', '#', '#', '=', '#', '#', '#', '-', '-', '-', '-', '-', '-', '-', '=', '=', '=', '=', '=', '=', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '#', '-', '-', '-', '-', '-', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '#', '=', '#', '#', '#',
        '#', '#', '=', '=', '=', '#', '#', '-', '-', '-', '-', '-', '-', '-', '=', '=', '=', '=', '=', '=', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '=', '=', '=', '=', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '=', '=', '=', '=', '=', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '=', '=', '=', '#', '#',
        '#', '#', '=', '=', '=', '#', '#', '-', '@', '-', '-', '-', '-', '-', '=', '=', '=', '=', '=', '=', '-', '-', '-', '#', '#', '-', '-', '-', '&', '-', '-', '-', '#', '#', '=', '=', '=', '=', '#', '#', '^', '^', '-', '-', '-', '-', '#', '#', '#', '=', '=', '=', '=', '=', '#', '#', '#', '-', '-', '-', '-', '-', '-', 'E', '-', '#', '#', '=', '=', '=', '#', '#',
        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '=', '=', '=', '=', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '=', '=', '=', '=', '=', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
};

inline char LEVEL_2_DATA[] = {
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '^', '^', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '=', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '^', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '#', '=', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '#', '#', '-', '*', '-', '-', '-', '-', '-', '^', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '=', '=', '-', '-', '-', '-', '-', '-', '-', '-', '-', '^', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '#', '=', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '=', '=', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '#', '=', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '=', '=', '-', '*', '-', '-', '-', '-', '-', '#', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '#', '-', '#', '-', '#', '-', '#', '-', '-', '-', '-', '-', '=', '=', '-', '-', '^', '^', '-', '-', '-', '-', '-', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '#', '=', '-', '-', '-', '-', '-', '-', '-', '-', '^', '-', '=', '=', '-', '-', '-', '#', '#', '-', '-', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '-', '#', '-', '#', '-', '#',
        '#', '#', '#', '#', '#', '#', '#', '-', '-', '-', '-', '-', '=', '#', '#', '#', '#', '#', '#', '#', '-', '-', '-', '#', '-', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '=', '-', '-', '#', '#', '-', '-', '-', '#', '#', '-', '=', '=', '-', '*', '-', '#', '#', '-', '-', '#', '-', '-', '*', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '#', '#', '#', '#', '#',
        '#', '#', '#', '=', '#', '#', '#', '-', '-', '-', '-', '-', '=', '=', '=', '=', '=', '=', '#', '=', '-', '-', '-', '#', '-', '-', '-', '=', '#', '=', '=', '#', '#', '=', '=', '=', '=', '-', '-', '#', '=', '-', '-', '-', '=', '#', '-', '=', '=', '-', '-', '-', '=', '=', '-', '-', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '#', '=', '#', '#', '#',
        '#', '#', '=', '=', '=', '#', '#', '-', '-', '-', '-', '-', '=', '=', '=', '=', '=', '=', '#', '=', '-', '-', '-', '#', '-', '-', '-', '=', '#', '=', '=', '#', '#', '=', '=', '=', '=', '-', '-', '=', '=', '-', '-', '-', '=', '=', '-', '=', '=', '-', '*', '-', '=', '=', '-', '-', '#', '-', '-', '-', '-', '-', '^', '-', '-', '-', '^', '-', '-', '-', '-', '#', '#', '=', '=', '=', '#', '#',
        '#', '#', '=', '=', '=', '#', '#', '-', '@', '-', '-', '-', '=', '=', '=', '=', '=', '=', '#', '=', '&', '-', '&', '=', '&', '-', '&', '=', '#', '=', '=', '#', '#', '=', '=', '#', '#', '-', '-', '=', '=', '-', '^', '-', '=', '=', '-', '=', '=', '-', '-', '-', '=', '=', '-', '-', '#', '^', '^', '-', '-', '-', '#', '-', '-', '-', '#', '-', '-', 'E', '-', '#', '#', '=', '=', '=', '#', '#',
        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '=', '=', '#', '#', '=', '=', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'
};

inline char LEVEL_3_DATA[] = {
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '*', '#', '#', '-', '-', '^', '^', '-', '-', '-', '-', '*', '*', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '=', '=', '-', '-', '#', '#', '-', '-', '-', '-', '*', '*', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '*', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '^', '^', '-', '-', '#', '#', '-', '-', '-', '-', '=', '=', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '^', '^', '-', '-', '#', '#', '-', '-', '-', '-', '-', '^', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '*', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '-', '-', '-', '#', '-', '-', '-', '-', '-', '#', '#', '-', '-', '*', '-', '*', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '=', '=', '-', '-', '#', '#', '-', '-', '=', '=', '-', '-', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '=', '-', '-', '=', '#', '-', '-', '#', '=', '-', '-', '-', '-', '-', '#', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '=', '=', '-', '-', '#', '#', '-', '-', '=', '=', '-', '-', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '=', '-', '-', '=', '#', '-', '-', '=', '=', '-', '-', '#', '-', '-', '#', '-', '-', '#', '-', '-', '#', '#', '-', '*', '-', '-', '-', '*', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '#', '-', '#', '-', '#', '-', '#', '-', '-', '-', '-', '-', '-', '=', '=', '-', '-', '=', '=', '-', '-', '=', '=', '-', '-', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '=', '-', '-', '=', '#', '-', '-', '=', '#', '-', '-', '#', '*', '-', '#', '-', '*', '#', '-', '-', '=', '=', '-', '-', '-', '-', '-', '-', '-', '=', '=', '-', '-', '^', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '-', '#', '-', '#', '-', '#',
        '#', '#', '#', '#', '#', '#', '#', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '=', '=', '*', '-', '#', '#', '-', '-', '-', '-', '#', '#', '-', '-', '=', '=', '-', '-', '#', '=', '-', '-', '=', '#', '-', '-', '#', '#', '-', '-', '#', '-', '-', '#', '-', '-', '#', '-', '-', '=', '=', '-', '-', '-', '-', '-', '-', '-', '=', '=', '-', '-', '#', '-', '-', '^', '-', '-', '-', '-', '-', '-', '#', '#', '#', '#', '#', '#', '#',
        '#', '#', '#', '=', '#', '#', '#', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '=', '=', '-', '-', '#', '#', '-', '-', '-', '-', '#', '#', '-', '-', '=', '=', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '#', '-', '-', '#', '-', '-', '#', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '#', '-', '-', '#', '-', '-', '^', '-', '-', '-', '#', '#', '#', '=', '#', '#', '#',
        '#', '#', '=', '=', '=', '#', '#', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '=', '=', '-', '-', '#', '#', '-', '-', '-', '-', '#', '#', '-', '-', '#', '#', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#', '-', '-', '#', '-', '-', '#', '-', '-', '#', '-', '-', '#', '#', '=', '=', '=', '=', '=', '=', '=', '#', '#', '#', '#', '#', '-', '-', '#', '-', '-', '#', '-', '-', '-', '#', '#', '=', '=', '=', '#', '#',
        '#', '#', '=', '=', '=', '#', '#', '-', '@', '-', '-', '-', '-', '#', '#', '^', '^', '=', '=', '^', '^', '#', '#', '^', '^', '^', '^', '#', '#', '^', '^', '#', '#', '&', '-', '-', '&', '-', '-', '&', '-', '-', '&', '#', '#', '-', '-', '=', '&', '&', '=', '&', '&', '=', '-', '-', '#', '#', '=', '=', '#', '#', '#', '=', '=', '#', '#', '#', '#', '#', '#', '#', '#', '-', '-', '#', '-', 'E', '-', '#', '#', '=', '=', '=', '#', '#',
        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '=', '=', '=', '=', '=', '=', '=', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'
};

static Level* LEVELS[] = {
        new Level(12, 72, std::vector<char>(std::begin(LEVEL_1_DATA), std::end(LEVEL_1_DATA))),
        new Level(12, 78, std::vector<char>(std::begin(LEVEL_2_DATA), std::end(LEVEL_2_DATA))),
        new Level(12, 86, std::vector<char>(std::begin(LEVEL_3_DATA), std::end(LEVEL_3_DATA)))
    };

Level* current_level = nullptr;

int level_index = 0;

Level::Level(size_t rows, size_t cols, const std::vector<char>& data)
    : m_rows(rows), m_columns(cols), m_data(data) {}

char Level::get_cell(size_t row, size_t col) const {
        return m_data[row * m_columns + col];
}

char& Level::get_cell(size_t row, size_t col) {
        return m_data[row * m_columns + col];
}

void Level::set_cell(size_t row, size_t col, char value) {
        m_data[row * m_columns + col] = value;
}

bool Level::is_inside(int row, int col) const {
        return row >= 0 && row < m_rows && col >= 0 && col < m_columns;
}


bool is_inside_level(int row, int column) {
        return current_level && current_level->is_inside(row, column);
}

bool is_colliding(Vector2 pos, char look_for) {
        Rectangle player_hitbox = {pos.x, pos.y, 1.0f, 1.0f};

        for (int row = pos.y - 1; row < pos.y + 1; ++row) {
                for (int column = pos.x - 1; column < pos.x + 1; ++column) {
                        if (is_inside_level(row, column) &&
                            current_level->get_cell(row, column) == look_for) {
                                return true;
                            }
                }
        }
        return false;
}

char& get_collider(Vector2 pos, char look_for) {
        Rectangle player_hitbox = {pos.x, pos.y, 1.0f, 1.0f};

        for (int row = pos.y - 1; row < pos.y + 1; ++row) {
                for (int column = pos.x - 1; column < pos.x + 1; ++column) {
                        if (is_inside_level(row, column) &&
                            current_level->get_cell(row, column) == look_for) {
                                return const_cast<char&>(current_level->get_cell(row, column));
                            }
                }
        }
        return const_cast<char&>(current_level->get_cell(pos.y, pos.x));
}

void load_level(int offset) {
        if (current_level) {
                delete current_level;
                current_level = nullptr;
        }

        level_index += offset;

        if (level_index >= LEVEL_COUNT) {
                game_state = VICTORY_STATE;
                create_victory_menu_background();
                level_index = 0;
                return;
        }

        current_level = new Level(*LEVELS[level_index]);

        player.spawn();
        spawn_enemies();
        derive_graphics_metrics_from_loaded_level();
        timer = MAX_LEVEL_TIME;
}

void unload_level() {
        if (current_level) {
                delete current_level;
                current_level = nullptr;
        }
}

void reset_level_index() {
    level_index = 0;
}

size_t Level::rows() const { return m_rows; }
size_t Level::columns() const { return m_columns; }